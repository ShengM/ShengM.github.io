(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{359:function(n,a,e){"use strict";e.r(a);var t=e(3),s=Object(t.a)({},(function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"why"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#why"}},[n._v("#")]),n._v(" Why")]),n._v(" "),e("p",[n._v("命令模式可以将请求发送者和接收者完全解耦，发送者与接收者之间没有直接引用关系，发送请求的对象只需要直到如何发送请求，不必知道如何完成请求。")]),n._v(" "),e("p",[e("strong",[n._v("命令模式（Command Pattern）")]),n._v("：将一个请求封装为一个对象，从而让我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。别名动作（Action）模式或事务（Transaction）模式。")]),n._v(" "),e("h2",{attrs:{id:"what"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what"}},[n._v("#")]),n._v(" What")]),n._v(" "),e("h3",{attrs:{id:"uml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uml"}},[n._v("#")]),n._v(" UML")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://blogbucket-1252640517.cos.ap-beijing.myqcloud.com/img/command.png",alt:"命令模式"}})]),n._v(" "),e("h3",{attrs:{id:"角色说明："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#角色说明："}},[n._v("#")]),n._v(" 角色说明：")]),n._v(" "),e("p",[e("strong",[n._v("ConcreteCommand（具体命令类）")]),n._v("：对应具体的接收者对象，将接收者对象的动作绑定其中。")]),n._v(" "),e("p",[e("strong",[n._v("Invoker（调用者）")]),n._v("：即请求发送者，通过命令对象来执行请求。")]),n._v(" "),e("blockquote",[e("p",[n._v("每一个具体命令类对应一个请求的处理者（接收者），通过向请求发送者注入不同的具体命令对象可以使得相同的发送者对应不同的接收者，从而实现“将一个请求封装为一个对象，用不同的请求对客户进行参数化”。")])]),n._v(" "),e("h3",{attrs:{id:"命令队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令队列"}},[n._v("#")]),n._v(" 命令队列")]),n._v(" "),e("p",[n._v("将多个请求排队，当一个请求发送者发送一个请求时，将不止一个请求接收者产生响应，这些请求接收者将逐个执行业务方法，完成对请求的处理。此时，可以使用命令队列。代码示例如下。")]),n._v(" "),e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("abstract class Command\n{\n  public abstract void Execute();\n}\n\nclass CommandQueue\n{\n  private List<Command> _commands = new List<Command>();\n\n  public void AddCommand(Command command)\n  {\n    _commands.Add(command);\n  }\n\n  public void RemoveCommand(Command command)\n  {\n    _commands.Remove(command);\n  }\n\n  public void Execute()\n  {\n    _commands.ForEach(command => command.Execute());\n  }\n}\n\nclass Invoker\n{\n  private CommandQueue _commandQueue;\n\n  public Invoker(CommandQueue commandQueue)\n  {\n    _commandQueue = commandQueue;\n  }\n\n  public void SetCommandQueue(CommandQueue commandQueue)\n  {\n    _commandQueue = commandQueue;\n  }\n\n  public void Call()\n  {\n    _commandQueue.Execute();\n  }\n}\n")])])]),e("h3",{attrs:{id:"撤销操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销操作"}},[n._v("#")]),n._v(" 撤销操作")]),n._v(" "),e("p",[n._v("可以通过逆向操作来实现撤销，还可以通过保存对象的历史来实现撤销，后者可以使用备忘录模式（Memento Pattern）。代码示例如下：")]),n._v(" "),e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public class AddCommand : Command\n{\n  private readonly Adder _adder = new Adder();\n  private int _lastValue = 0;\n\n  public override void Execute(int value)\n  {\n    var result = _adder.Add(value);\n    _lastValue = value;\n    Console.WriteLine("Add Result: {0}", result);\n  }\n\n  public override void Undo()\n  {\n    var result = _adder.Add(-_lastValue);\n    Console.WriteLine("Undo Result: {0}", result);\n  }\n}\n\npublic class Adder\n{\n  private int _sum = 0;\n\n  public int Add(int num)\n  {\n    _sum += num;\n    return _sum;\n  }\n}\n\nclass Starter : IStart\n{\n  public void Run()\n  {\n    var c = new AddCommand();\n    c.Execute(1);\n    c.Undo();\n    c.Execute(10);\n    c.Execute(15);\n  }\n}\n')])])]),e("p",[n._v("可以引入命令集合或其他方式存储每一次操作时命令的状态，从而实现多次撤销（Undo）和多次恢复（Redo）操作。")]),n._v(" "),e("h3",{attrs:{id:"请求日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求日志"}},[n._v("#")]),n._v(" 请求日志")]),n._v(" "),e("p",[n._v("即将请求的历史记录保存下来，通常以日志文件（Log File）的形式永久存储在计算机中。")]),n._v(" "),e("h3",{attrs:{id:"宏命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#宏命令"}},[n._v("#")]),n._v(" 宏命令")]),n._v(" "),e("p",[n._v("又称组合命令，组合模式和命令模式联用，通常宏命令不直接与请求接收者交互，而是通过它的成员来调用接收者的方法。执行一个宏命令将触发多个具体命令的执行，从而实现对命令的批处理。")])])}),[],!1,null,null,null);a.default=s.exports}}]);