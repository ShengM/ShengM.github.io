(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{344:function(t,r,e){"use strict";e.r(r);var a=e(3),s=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"why"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#why"}},[t._v("#")]),t._v(" Why")]),t._v(" "),e("p",[t._v("解释器模式描述了如何为简单的语言定义一个文法，如何在该语言中表示一个句子，以及如何解释这个句子。每个文法规则的语言实例都可以表示为一个抽象语法树。")]),t._v(" "),e("h2",{attrs:{id:"what"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what"}},[t._v("#")]),t._v(" What")]),t._v(" "),e("h3",{attrs:{id:"uml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uml"}},[t._v("#")]),t._v(" UML")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://blogbucket-1252640517.cos.ap-beijing.myqcloud.com/img/interpret.png",alt:"解释器模式"}})]),t._v(" "),e("h3",{attrs:{id:"角色说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#角色说明"}},[t._v("#")]),t._v(" 角色说明")]),t._v(" "),e("p",[e("strong",[t._v("AbstractExpression（抽象表达式）")]),t._v("：在表达式中声明了抽象的解释操作，是所有终结符表达式和非终结符表达式的公共父类。")]),t._v(" "),e("p",[e("strong",[t._v("TerminalExpression（终结符表达式）")]),t._v("：实现了与文法中的终结符相关联的解释操作，在句子中的每一个终结符都是该类的一个实例。通常一个解释器模式中只有少数几个终结符表达式类，它们的实例可以通过非终结符表达式组成较为复杂的句子。")]),t._v(" "),e("p",[e("strong",[t._v("NonterminalExpression（非终结符表达式）")]),t._v("：实现了文法中非终结符的解释操作，由于在非终结符表达式中可以包含终结符表达式，也可以继续包含非终结符表达式，因此其解释操作一般通过递归完成。")]),t._v(" "),e("p",[e("strong",[t._v("Context（环境类）")]),t._v("：又称上下文类，用于存储解释器之外的一些全局信息，通常临时存储了需要解释的语句。")]),t._v(" "),e("h3",{attrs:{id:"示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),e("blockquote",[e("p",[t._v("Sunny软件公司欲为某玩具公司开发一套机器人控制程序，在该机器人控制程序中包含一些简单的英文控制指令，每一个指令对应一个表达式(expression)，该表达式可以是简单表达式也可以是复合表达式，每一个简单表达式由移动方向(direction)，移动方式(action)和移动距离(distance)三部分组成，其中移动方向包括上(up)、下(down)、左(left)、右(right)；移动方式包括移动(move)和快速移动(run)；移动距离为一个正整数。两个表达式之间可以通过与(and)连接，形成复合(composite)表达式。")])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/ShengM/designmodedemo/tree/master/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("代码链接")]),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"context"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[t._v("#")]),t._v(" Context")]),t._v(" "),e("p",[t._v("用于存储解释器之外的一些全局信息，通常作为参数传递给所有表达式的Interpret方法，可以在Context对象中存储和访问表达式解释器的状态，向解释器提供一些全局、公共的数据，还可以增加一些所有解释器都共有的功能，减轻解释器的职责。")])])}),[],!1,null,null,null);r.default=s.exports}}]);