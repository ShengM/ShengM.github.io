(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{363:function(t,a,_){"use strict";_.r(a);var v=_(3),e=Object(v.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),_("p",[t._v("最近在学习"),_("a",{attrs:{href:"https://c4model.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("C4 model"),_("OutboundLink")],1),t._v("，原因是随着更多的参与系统架构设计一类的事情，越来越发现图形化的表达方式对于软件设计很有意义。")]),t._v(" "),_("ul",[_("li",[t._v("首先，图形化的表达方式比文字更优越，无论是面对需求产品等非技术人员，还是面对开发人员，图形化的方式可以简明扼要的表达自己的思路，使得双方的交流很快能落到双方关心的问题上；")]),t._v(" "),_("li",[t._v("其次，图形化的方式对于团队技术资产的传承很有意义，新人可以快速了解系统全貌以及系统内各模块的设计思想，对其融入团队和个人成长都有帮助；")])]),t._v(" "),_("p",[t._v("C4 model 是一套可视化表达的方法论，从不同层级（抽象层次）的视角表达系统架构。C4 定义了 4 中基础架构图（"),_("em",[t._v("Context")]),t._v("、"),_("em",[t._v("Container")]),t._v("、"),_("em",[t._v("Component")]),t._v("、"),_("em",[t._v("Code")]),t._v("）和 3 种增补的架构图（"),_("em",[t._v("System Landscape diagram")]),t._v("、"),_("em",[t._v("Dynamic diagram")]),t._v("、"),_("em",[t._v("Deployment diagram")]),t._v("）；C4 没有对具体符号做出详细定义，但提供了一套简单示例，可以在以后的实际使用中在此基础上根据需要增强。")]),t._v(" "),_("h2",{attrs:{id:"context"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[t._v("#")]),t._v(" Context")]),t._v(" "),_("p",[t._v("系统架构图，表达系统对于用户的意义以及与其他系统之间的协作关系。这是最高层次的抽象，可以表达整个系统的全貌。")]),t._v(" "),_("p",[t._v("系统架构图可由如下几种元素描述：")]),t._v(" "),_("ul",[_("li",[t._v("用户")]),t._v(" "),_("li",[t._v("系统")]),t._v(" "),_("li",[t._v("周边系统")]),t._v(" "),_("li",[t._v("前三者之间的关系")])]),t._v(" "),_("p",[t._v("下图所示是 C4 官网的系统架构图")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://blogbucket-1252640517.cos.ap-beijing.myqcloud.com/img/context.png",alt:"系统架构图"}})]),t._v(" "),_("h3",{attrs:{id:"注意"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),_("ol",[_("li",[t._v("系统符号间的连线表示系统之间的依赖关系，连线的描述需要具体说明依赖情况。")])]),t._v(" "),_("h2",{attrs:{id:"container"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#container"}},[t._v("#")]),t._v(" Container")]),t._v(" "),_("p",[t._v("容器，表示软件系统最大粒度的组成部分，是数据和代码的承载者，可以是一个进程、应用、服务等等，比如数据库、桌面应用、移动应用、文件系统等。容器图描述了软件系统内部的结构，以及这些结构之间的关系。")]),t._v(" "),_("p",[t._v("容器图可由如下几种元素描述：")]),t._v(" "),_("ul",[_("li",[t._v("用户")]),t._v(" "),_("li",[t._v("系统边界")]),t._v(" "),_("li",[t._v("容器")]),t._v(" "),_("li",[t._v("周边系统")]),t._v(" "),_("li",[t._v("用户与容器、容器与容器、容器与系统之间的关系")])]),t._v(" "),_("p",[t._v("下图所示是 C4 官网的容器图")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://blogbucket-1252640517.cos.ap-beijing.myqcloud.com/img/container.png",alt:"容器图"}})]),t._v(" "),_("h3",{attrs:{id:"注意-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#注意-2"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),_("ol",[_("li",[t._v("容器符号可以描述技术选型；")]),t._v(" "),_("li",[t._v("关系连线可以描述容器之间的通信方式。")])]),t._v(" "),_("h2",{attrs:{id:"component"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#component"}},[t._v("#")]),t._v(" Component")]),t._v(" "),_("p",[t._v("组件图，表示容器的内部结构以及这些机构之间的关系。")]),t._v(" "),_("p",[t._v("组件图可由如下几种元素描述：")]),t._v(" "),_("ul",[_("li",[t._v("组件")]),t._v(" "),_("li",[t._v("容器")]),t._v(" "),_("li",[t._v("容器边界")]),t._v(" "),_("li",[t._v("系统")]),t._v(" "),_("li",[t._v("组件与组件、组件与容器、组件与系统之间的关系")])]),t._v(" "),_("p",[t._v("下图所示是 C4 官网的组件图")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://blogbucket-1252640517.cos.ap-beijing.myqcloud.com/img/component.png",alt:"组件图"}})]),t._v(" "),_("h3",{attrs:{id:"注意-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#注意-3"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),_("ol",[_("li",[t._v("每个组件符号需要描述组件的职责，技术和实现细节也可以描述；")])]),t._v(" "),_("h2",{attrs:{id:"code"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#code"}},[t._v("#")]),t._v(" Code")]),t._v(" "),_("p",[t._v("代码图，表示组件的具体实现，可以用 UML 类图表示。")]),t._v(" "),_("h3",{attrs:{id:"注意-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#注意-4"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),_("ol",[_("li",[t._v("通常只对核心或者复杂模块通常提供这一级别的架构图")])]),t._v(" "),_("h2",{attrs:{id:"system-landscape-diagram"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#system-landscape-diagram"}},[t._v("#")]),t._v(" System Landscape diagram")]),t._v(" "),_("p",[t._v("系统全景图，区别于 Context，它的关注点不是聚焦在单个软件系统上，而是整个 IT 系统的全貌。")]),t._v(" "),_("p",[t._v("下图所示是 C4 官网的系统全景图")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://blogbucket-1252640517.cos.ap-beijing.myqcloud.com/img/landscape.png",alt:"系统全景图"}})]),t._v(" "),_("h2",{attrs:{id:"dynamic-diagram"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-diagram"}},[t._v("#")]),t._v(" Dynamic diagram")]),t._v(" "),_("p",[t._v("动态图，类似 UML 协作图，反应模型运行时是如何协作来完成一项功能，用数字表示模型间的交互顺序。")]),t._v(" "),_("p",[t._v("下图所示是 C4 官网的动态图")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://blogbucket-1252640517.cos.ap-beijing.myqcloud.com/img/dynamic.png",alt:"动态图"}})]),t._v(" "),_("h2",{attrs:{id:"deployment-diagram"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#deployment-diagram"}},[t._v("#")]),t._v(" Deployment diagram")]),t._v(" "),_("p",[t._v("部署图，描述容器和部署节点间的关系。")]),t._v(" "),_("p",[t._v("下图所示是 C4 官网的部署图")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://blogbucket-1252640517.cos.ap-beijing.myqcloud.com/img/deployment.png",alt:"部署图"}})]),t._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),_("p",[t._v("感觉 C4 相对于 UML 大大降低了入门门槛，可以让我们快速拥有一种统一 DSL 来进行可视化表达，然而使用场景也比较狭窄，比如框架、库的架构，无法很好的用 C4 表达；不过 C4 并不是 UML 的替代品，它相当于可视化表达的简易教程，使我们进入可视化表达的世界，当面对更多更复杂场景时，可以快速从 UML 中获取武器。")])])}),[],!1,null,null,null);a.default=e.exports}}]);