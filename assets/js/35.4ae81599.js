(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{354:function(t,a,s){"use strict";s.r(a);var r=s(3),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"why"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#why"}},[t._v("#")]),t._v(" Why")]),t._v(" "),s("p",[s("strong",[t._v("访问者模式（Visitor Pattern）")]),t._v("：提供一个作用于某对象结构中的各元素的操作表示，使我们可以在不改变各元素的类的前提下定义作用于这些元素的新操作。")]),t._v(" "),s("h2",{attrs:{id:"what"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what"}},[t._v("#")]),t._v(" What")]),t._v(" "),s("h3",{attrs:{id:"uml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uml"}},[t._v("#")]),t._v(" UML")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blogbucket-1252640517.cos.ap-beijing.myqcloud.com/img/visitor.png",alt:"访问者模式"}})]),t._v(" "),s("h3",{attrs:{id:"角色说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#角色说明"}},[t._v("#")]),t._v(" 角色说明")]),t._v(" "),s("p",[s("strong",[t._v("Visitor（抽象访问者）")]),t._v("：为对象结构中每一个具体元素类声明一个访问方法")]),t._v(" "),s("p",[s("strong",[t._v("ConcreteVisitor（具体访问者）")]),t._v("：实现了由抽象访问者声明的操作，每一个操作用于访问对象结构中一种类型的元素")]),t._v(" "),s("p",[s("strong",[t._v("Element（抽象元素）")]),t._v("：定义了Accept方法，接受一个抽象访问者")]),t._v(" "),s("h3",{attrs:{id:"适用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[t._v("#")]),t._v(" 适用场景")]),t._v(" "),s("ul",[s("li",[t._v("一个对象包含多个类型的对象，希望对这些对象实施一些依赖其具体类型的操作")]),t._v(" "),s("li",[t._v("对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作")])])])}),[],!1,null,null,null);a.default=e.exports}}]);