(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{342:function(n,t,a){"use strict";a.r(t);var e=a(3),s=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"why"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why"}},[n._v("#")]),n._v(" Why")]),n._v(" "),a("p",[n._v("单例模式可以确保一个类只有一个实例，实例化工作由类自身完成，同时提供获取全局唯一实例的方法。")]),n._v(" "),a("h2",{attrs:{id:"what"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what"}},[n._v("#")]),n._v(" What")]),n._v(" "),a("h3",{attrs:{id:"饿汉式单例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#饿汉式单例"}},[n._v("#")]),n._v(" 饿汉式单例")]),n._v(" "),a("p",[n._v("在定义静态变量的时候实例化单例类，因此在类加载的时候单例对象已经创建")]),n._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public class Singleton\n{\n  private static readonly Singleton _instance = new Singleton();\n\n  private Singleton()\n  {\n  }\n\n  public static Singleton GetInstance()\n  {\n    return _instance;\n  }\n}\n")])])]),a("h3",{attrs:{id:"懒汉式单例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#懒汉式单例"}},[n._v("#")]),n._v(" 懒汉式单例")]),n._v(" "),a("p",[n._v("在调用获取实例的方法时才加载，称作"),a("strong",[n._v("延迟加载（Lazy Load）")]),n._v("，但在多线程并发场景下需要处理线程安全的问题，处理线程安全的方式称作"),a("strong",[n._v("双重检查锁定（Double-Check Locking）")]),n._v("。")]),n._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public class Singleton2\n{\n  private static Singleton2 _instance;\n  private static Object _obj = new Object();\n\n  private Singleton2()\n  {\n  }\n\n  public static Singleton2 GetInstance()\n  {\n    if (_instance == null)\n    {\n      lock (_obj)\n      {\n        if (_instance == null)\n        {\n          _instance = new Singleton2();\n        }\n      }\n\n    }\n\n    return _instance;\n  }\n}\n")])])]),a("h3",{attrs:{id:"iodh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iodh"}},[n._v("#")]),n._v(" IoDH")]),n._v(" "),a("p",[n._v("在C#中，可以通过静态内部类实现单例，及可以延迟加载，又可以保证线程安全，不影响性能。")]),n._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("public class Singleton3\n{\n  private Singleton3()\n  {\n  }\n\n  private class Singleton3Hold\n  {\n    internal static readonly Singleton3 Instance = new Singleton3();\n  }\n\n  public static Singleton3 GetInstance()\n  {\n    return Singleton3Hold.Instance;\n  }\n}\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);